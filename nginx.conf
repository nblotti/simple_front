user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log info;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;

    gzip on;
    gzip_disable "msie6";

    server {
        listen 80;
        server_name gpt.azqore.com;
        root /usr/share/nginx/html;

        index index.html;

        location / {
            try_files $uri $uri/ /index.html;

            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';

            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location /api {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
                return 204;
            }

            proxy_pass https://gpt.azqore.com;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~* \.mjs$ {
                        # target only *.mjs files
                        # now we can safely override types since we are only
                        # targeting a single file extension.
                        types {
                            text/javascript mjs;
                        }
                    }

        location ~* \.css$ {
            add_header Content-Type text/css;
            try_files $uri =404;
        }

        location ~* \.(jpg|jpeg|gif|png|ico|svg|webp|eot|ttf|otf|woff|woff2)$ {
            try_files $uri =404;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
